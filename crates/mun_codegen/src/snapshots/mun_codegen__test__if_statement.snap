---
source: crates/mun_codegen/src/test.rs
expression: "pub fn foo(a:i32) -> i32 {\n    let b = if a > 3 {\n        let c = if a > 4 {\n            a+1\n        } else {\n            a+3\n        }\n        c\n    } else {\n        a-1\n    }\n    b\n}"
---
; == FILE IR =====================================

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@global_type_table = external global [1 x %"mun_codegen::ir::types::TypeInfo"*]

define i32 @foo(i32 %0) {
body:
  %greater = icmp sgt i32 %0, 3
  br i1 %greater, label %then, label %else

then:                                             ; preds = %body
  %greater3 = icmp sgt i32 %0, 4
  %add = add i32 %0, 1
  %add9 = add i32 %0, 3
  %iftmp = select i1 %greater3, i32 %add, i32 %add9
  br label %if_merge

else:                                             ; preds = %body
  %sub = sub i32 %0, 1
  br label %if_merge

if_merge:                                         ; preds = %else, %then
  %iftmp12 = phi i32 [ %iftmp, %then ], [ %sub, %else ]
  ret i32 %iftmp12
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@"type_info::<core::i32>::name" = private unnamed_addr constant [10 x i8] c"core::i32\00"
@"type_info::<core::i32>" = private unnamed_addr constant %"mun_codegen::ir::types::TypeInfo" <{ [0 x i64] zeroinitializer, [16 x i8] c"\17yzt\19\D62\17\D25\95C\17\88[\FA", [0 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"type_info::<core::i32>::name", i32 0, i32 0), [0 x i64] zeroinitializer, i32 32, [0 x i64] zeroinitializer, i8 4, [0 x i64] zeroinitializer, i8 0, [1 x i16] zeroinitializer }>
@global_type_table = constant [1 x %"mun_codegen::ir::types::TypeInfo"*] [%"mun_codegen::ir::types::TypeInfo"* @"type_info::<core::i32>"]

