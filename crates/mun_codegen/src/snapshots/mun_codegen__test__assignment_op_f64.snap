---
source: crates/mun_codegen/src/test.rs
expression: "pub fn assign(a: f64, b: f64) -> f64 {\n    a = b;\n    a\n}\npub fn assign_add(a: f64, b: f64) -> f64 {\n    a += b;\n    a\n}\npub fn assign_subtract(a: f64, b: f64) -> f64 {\n    a -= b;\n    a\n}\npub fn assign_multiply(a: f64, b: f64) -> f64 {\n    a *= b;\n    a\n}\npub fn assign_divide(a: f64, b: f64) -> f64 {\n    a /= b;\n    a\n}\npub fn assign_remainder(a: f64, b: f64) -> f64 {\n    a %= b;\n    a\n}"
---
; == FILE IR =====================================

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@global_type_table = external global [1 x %"mun_codegen::ir::types::TypeInfo"*]

define double @assign(double %0, double %1) {
body:
  ret double %1
}

define double @assign_add(double %0, double %1) {
body:
  %add = fadd double %0, %1
  ret double %add
}

define double @assign_subtract(double %0, double %1) {
body:
  %sub = fsub double %0, %1
  ret double %sub
}

define double @assign_multiply(double %0, double %1) {
body:
  %mul = fmul double %0, %1
  ret double %mul
}

define double @assign_divide(double %0, double %1) {
body:
  %div = fdiv double %0, %1
  ret double %div
}

define double @assign_remainder(double %0, double %1) {
body:
  %rem = frem double %0, %1
  ret double %rem
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@"type_info::<core::f64>::name" = private unnamed_addr constant [10 x i8] c"core::f64\00"
@"type_info::<core::f64>" = private unnamed_addr constant %"mun_codegen::ir::types::TypeInfo" <{ [0 x i64] zeroinitializer, [16 x i8] c"`\DBF\9C?YJ%G\AD4\9F\D5\92%A", [0 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"type_info::<core::f64>::name", i32 0, i32 0), [0 x i64] zeroinitializer, i32 64, [0 x i64] zeroinitializer, i8 8, [0 x i64] zeroinitializer, i8 0, [1 x i16] zeroinitializer }>
@global_type_table = constant [1 x %"mun_codegen::ir::types::TypeInfo"*] [%"mun_codegen::ir::types::TypeInfo"* @"type_info::<core::f64>"]

