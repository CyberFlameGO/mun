---
source: crates/mun_codegen/src/test.rs
expression: "pub fn assign_bitand(a: u64, b: u64) -> u64 {\n    a &= b;\n    a\n}\npub fn assign_bitor(a: u64, b: u64) -> u64 {\n    a |= b;\n    a\n}\npub fn assign_bitxor(a: u64, b: u64) -> u64 {\n    a ^= b;\n    a\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo = type { [16 x i8], i8*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo*]

define i64 @assign_bitand(i64, i64) {
body:
  %bit_and = and i64 %0, %1
  ret i64 %bit_and
}

define i64 @assign_bitor(i64, i64) {
body:
  %bit_or = or i64 %0, %1
  ret i64 %bit_or
}

define i64 @assign_bitxor(i64, i64) {
body:
  %bit_xor = xor i64 %0, %1
  ret i64 %bit_xor
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8*, i32, i8, i8 }

@"type_info::<core::u64>::name" = private unnamed_addr constant [10 x i8] c"core::u64\00"
@"type_info::<core::u64>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"\A6\E7g \D1\8B\1Aq`\1F\1E\07\BB5@q", [10 x i8]* @"type_info::<core::u64>::name", i32 64, i8 8, i8 0 }
@global_type_table = constant [1 x %struct.MunTypeInfo*] [%struct.MunTypeInfo* @"type_info::<core::u64>"]

