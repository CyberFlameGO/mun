---
source: crates/mun_codegen/src/test.rs
expression: "pub fn add(a: u64, b: u64) -> u64 { a + b }\npub fn subtract(a: u64, b: u64) -> u64 { a - b }\npub fn multiply(a: u64, b: u64) -> u64 { a * b }\npub fn divide(a: u64, b: u64) -> u64 { a / b }\npub fn remainder(a: u64, b: u64) -> u64 { a % b }"
---
; == FILE IR =====================================

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@global_type_table = external global [1 x %"mun_codegen::ir::types::TypeInfo"*]

define i64 @add(i64 %0, i64 %1) {
body:
  %add = add i64 %0, %1
  ret i64 %add
}

define i64 @subtract(i64 %0, i64 %1) {
body:
  %sub = sub i64 %0, %1
  ret i64 %sub
}

define i64 @multiply(i64 %0, i64 %1) {
body:
  %mul = mul i64 %0, %1
  ret i64 %mul
}

define i64 @divide(i64 %0, i64 %1) {
body:
  %div = udiv i64 %0, %1
  ret i64 %div
}

define i64 @remainder(i64 %0, i64 %1) {
body:
  %rem = urem i64 %0, %1
  ret i64 %rem
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@"type_info::<core::u64>::name" = private unnamed_addr constant [10 x i8] c"core::u64\00"
@"type_info::<core::u64>" = private unnamed_addr constant %"mun_codegen::ir::types::TypeInfo" <{ [0 x i64] zeroinitializer, [16 x i8] c"\A6\E7g \D1\8B\1Aq`\1F\1E\07\BB5@q", [0 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"type_info::<core::u64>::name", i32 0, i32 0), [0 x i64] zeroinitializer, i32 64, [0 x i64] zeroinitializer, i8 8, [0 x i64] zeroinitializer, i8 0, [1 x i16] zeroinitializer }>
@global_type_table = constant [1 x %"mun_codegen::ir::types::TypeInfo"*] [%"mun_codegen::ir::types::TypeInfo"* @"type_info::<core::u64>"]

