---
source: crates/mun_codegen/src/test.rs
expression: "pub fn equals(a: u32, b: u32) -> bool { a == b }\npub fn not_equal(a: u32, b: u32) -> bool { a != b}\npub fn less(a: u32, b: u32) -> bool { a < b }\npub fn less_equal(a: u32, b: u32) -> bool { a <= b }\npub fn greater(a: u32, b: u32) -> bool { a > b }\npub fn greater_equal(a: u32, b: u32) -> bool { a >= b }"
---
; == FILE IR =====================================

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@global_type_table = external global [2 x %"mun_codegen::ir::types::TypeInfo"*]

define i1 @equals(i32 %0, i32 %1) {
body:
  %eq = icmp eq i32 %0, %1
  ret i1 %eq
}

define i1 @not_equal(i32 %0, i32 %1) {
body:
  %neq = icmp ne i32 %0, %1
  ret i1 %neq
}

define i1 @less(i32 %0, i32 %1) {
body:
  %less = icmp ult i32 %0, %1
  ret i1 %less
}

define i1 @less_equal(i32 %0, i32 %1) {
body:
  %lesseq = icmp ule i32 %0, %1
  ret i1 %lesseq
}

define i1 @greater(i32 %0, i32 %1) {
body:
  %greater = icmp ugt i32 %0, %1
  ret i1 %greater
}

define i1 @greater_equal(i32 %0, i32 %1) {
body:
  %greatereq = icmp uge i32 %0, %1
  ret i1 %greatereq
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@"type_info::<core::u32>::name" = private unnamed_addr constant [10 x i8] c"core::u32\00"
@"type_info::<core::u32>" = private unnamed_addr constant %"mun_codegen::ir::types::TypeInfo" <{ [0 x i64] zeroinitializer, [16 x i8] c"daz5d\A6\BE\88\81=&Y\A1+\C6\1D", [0 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"type_info::<core::u32>::name", i32 0, i32 0), [0 x i64] zeroinitializer, i32 32, [0 x i64] zeroinitializer, i8 4, [0 x i64] zeroinitializer, i8 0, [1 x i16] zeroinitializer }>
@"type_info::<core::bool>::name" = private unnamed_addr constant [11 x i8] c"core::bool\00"
@"type_info::<core::bool>" = private unnamed_addr constant %"mun_codegen::ir::types::TypeInfo" <{ [0 x i64] zeroinitializer, [16 x i8] c"x\82\81m t7\03\CB\F8k\81-;\C9\84", [0 x i64] zeroinitializer, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"type_info::<core::bool>::name", i32 0, i32 0), [0 x i64] zeroinitializer, i32 1, [0 x i64] zeroinitializer, i8 1, [0 x i64] zeroinitializer, i8 0, [1 x i16] zeroinitializer }>
@global_type_table = constant [2 x %"mun_codegen::ir::types::TypeInfo"*] [%"mun_codegen::ir::types::TypeInfo"* @"type_info::<core::u32>", %"mun_codegen::ir::types::TypeInfo"* @"type_info::<core::bool>"]

