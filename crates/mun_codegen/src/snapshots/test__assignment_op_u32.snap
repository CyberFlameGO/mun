---
source: crates/mun_codegen/src/test.rs
expression: "pub fn assign(a: u32, b: u32) -> u32 {\n    a = b;\n    a\n}\npub fn assign_add(a: u32, b: u32) -> u32 {\n    a += b;\n    a\n}\npub fn assign_subtract(a: u32, b: u32) -> u32 {\n    a -= b;\n    a\n}\npub fn assign_multiply(a: u32, b: u32) -> u32 {\n    a *= b;\n    a\n}\npub fn assign_divide(a: u32, b: u32) -> u32 {\n    a /= b;\n    a\n}\npub fn assign_remainder(a: u32, b: u32) -> u32 {\n    a %= b;\n    a\n}"
---
; == FILE IR =====================================
; ModuleID = 'main.mun'
source_filename = "main.mun"

%struct.MunTypeInfo = type { [16 x i8], i8*, i32, i8, i8 }

@global_type_table = external global [1 x %struct.MunTypeInfo*]

define i32 @assign(i32, i32) {
body:
  ret i32 %1
}

define i32 @assign_add(i32, i32) {
body:
  %add = add i32 %0, %1
  ret i32 %add
}

define i32 @assign_subtract(i32, i32) {
body:
  %sub = sub i32 %0, %1
  ret i32 %sub
}

define i32 @assign_multiply(i32, i32) {
body:
  %mul = mul i32 %0, %1
  ret i32 %mul
}

define i32 @assign_divide(i32, i32) {
body:
  %div = udiv i32 %0, %1
  ret i32 %div
}

define i32 @assign_remainder(i32, i32) {
body:
  %rem = urem i32 %0, %1
  ret i32 %rem
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%struct.MunTypeInfo = type { [16 x i8], i8*, i32, i8, i8 }

@"type_info::<core::u32>::name" = private unnamed_addr constant [10 x i8] c"core::u32\00"
@"type_info::<core::u32>" = private unnamed_addr constant %struct.MunTypeInfo { [16 x i8] c"daz5d\A6\BE\88\81=&Y\A1+\C6\1D", [10 x i8]* @"type_info::<core::u32>::name", i32 32, i8 4, i8 0 }
@global_type_table = constant [1 x %struct.MunTypeInfo*] [%struct.MunTypeInfo* @"type_info::<core::u32>"]

