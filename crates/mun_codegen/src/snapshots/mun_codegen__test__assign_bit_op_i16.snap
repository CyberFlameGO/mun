---
source: crates/mun_codegen/src/test.rs
expression: "pub fn assign_bitand(a: i16, b: i16) -> i16 {\n    a &= b;\n    a\n}\npub fn assign_bitor(a: i16, b: i16) -> i16 {\n    a |= b;\n    a\n}\npub fn assign_bitxor(a: i16, b: i16) -> i16 {\n    a ^= b;\n    a\n}"
---
; == FILE IR =====================================

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@global_type_table = external global [1 x %"mun_codegen::ir::types::TypeInfo"*]

define i16 @assign_bitand(i16 %0, i16 %1) {
body:
  %bit_and = and i16 %0, %1
  ret i16 %bit_and
}

define i16 @assign_bitor(i16 %0, i16 %1) {
body:
  %bit_or = or i16 %0, %1
  ret i16 %bit_or
}

define i16 @assign_bitxor(i16 %0, i16 %1) {
body:
  %bit_xor = xor i16 %0, %1
  ret i16 %bit_xor
}


; == GROUP IR ====================================
; ModuleID = 'group_name'
source_filename = "group_name"

%"mun_codegen::ir::types::TypeInfo" = type <{ [0 x i64], [16 x i8], [0 x i64], i8*, [0 x i64], i32, [0 x i64], i8, [0 x i64], i8, [1 x i16] }>

@"type_info::<core::i16>::name" = private unnamed_addr constant [10 x i8] c"core::i16\00"
@"type_info::<core::i16>" = private unnamed_addr constant %"mun_codegen::ir::types::TypeInfo" <{ [0 x i64] zeroinitializer, [16 x i8] c"\05\CD|\F8Bv\D8\B1\E8\8B\8C\D8\8D\B5\89\B0", [0 x i64] zeroinitializer, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"type_info::<core::i16>::name", i32 0, i32 0), [0 x i64] zeroinitializer, i32 16, [0 x i64] zeroinitializer, i8 2, [0 x i64] zeroinitializer, i8 0, [1 x i16] zeroinitializer }>
@global_type_table = constant [1 x %"mun_codegen::ir::types::TypeInfo"*] [%"mun_codegen::ir::types::TypeInfo"* @"type_info::<core::i16>"]

